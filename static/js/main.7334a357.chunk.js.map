{"version":3,"sources":["App.js","hooks/useWindowSize.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","classes","size","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","dataSet","setDataSet","handleSet","Data","dataArr","set","i","push","console","log","newSet","j","length","temp","Week","DM","TV","OOH","PPC","Container","Box","className","display","bgcolor","ResponsiveContainer","ComposedChart","data","margin","top","right","bottom","left","XAxis","dataKey","label","value","position","offset","YAxis","scale","angle","domain","allowDataOverflow","Tooltip","Legend","CartesianGrid","stroke","Area","type","fill","Bar","barSize","Scatter","Line","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8mDAWMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eAqGfC,EAjGH,WACZ,IAAMC,EAAUd,IAEVe,ECvBS,WAA0B,IAAD,EACHC,mBAAS,CAC5CC,WAAOC,EACPC,YAAQD,IAH8B,mBAChCE,EADgC,KACpBC,EADoB,KA6BvC,OAvBAC,qBACC,WACC,SAASC,IAERF,EAAc,CACbJ,MAAOO,OAAOC,WACdN,OAAQK,OAAOE,cAUjB,OANAF,OAAOG,iBAAiB,SAAUJ,GAGlCA,IAGO,WACNC,OAAOI,oBAAoB,SAAUL,MAIvC,IAEMH,EDNKS,GAHK,EAKYb,qBALZ,mBAKXc,EALW,KAKFC,EALE,KAMlBT,qBAAW,WAETS,EAAWC,EADKC,MAgBhB,IAOF,IAAMD,EAAY,SAACE,GAEjB,IAAIC,EAAM,GACV,IAAK,IAAIC,KAAKF,EACZC,EAAIE,KAAKH,EAAQE,IAGnBE,QAAQC,IAAIJ,GAEZ,IADA,IAAIK,EAAS,GACLC,EAAI,EAAGA,EAAIN,EAAI,GAAGO,OAAQD,IAAI,CACpC,IAAIE,EAAO,GAEXA,EAAKC,KAAOH,EAAE,EACdE,EAAKE,GAAKV,EAAI,GAAGM,GACjBE,EAAKG,GAAKX,EAAI,GAAGM,GACjBE,EAAKI,IAAMZ,EAAI,GAAGM,GAClBE,EAAKK,IAAMb,EAAI,GAAGM,GAElBD,EAAOH,KAAKM,GAId,OAFAL,QAAQC,IAAIC,GAELA,GAGP,OACE,eAACS,EAAA,EAAD,WACE,yDADF,IACmC,cAACC,EAAA,EAAD,CAAKC,UAAWrC,EAAQT,MAC3D+C,QAAQ,OACRnC,MAAoB,GAAbF,EAAKE,MAAaE,OAAsB,GAAdJ,EAAKI,OACtCkC,QAAQ,YAH2B,SAMjC,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAeC,KAAM1B,EAAS2B,OAAQ,CAClCC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAJV,UAMR,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOC,MAAO,CAAEC,MAAO,WAAYC,SAAU,mBAAoBC,QAAS,KACvF,cAACC,EAAA,EAAD,CAAOC,MAAM,MAAML,MAAO,CAACC,MAAQ,YAAaK,OAAS,GAAIJ,SAAU,cAAeK,OAAQ,CAAC,KAAS,QAASC,mBAAiB,IAClI,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeC,OAAO,YACtB,cAACC,EAAA,EAAD,CAAMC,KAAK,WAAWf,QAAQ,MAAMa,OAAO,UAAUG,KAAK,YACxD,cAACC,EAAA,EAAD,CAAKjB,QAAQ,MAAMkB,QAAS,GAAIF,KAAK,YACzC,cAACG,EAAA,EAAD,CAASJ,KAAK,WAAWG,QAAS,GAAIlB,QAAQ,KAAKgB,KAAK,UAAUH,OAAO,YACvE,cAACO,EAAA,EAAD,CAAML,KAAK,WAAWf,QAAQ,KAAKgB,KAAK,UAAUH,OAAO,uBExF5CQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7334a357.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport { Area, Bar, ComposedChart, Legend, Scatter, Line, CartesianGrid, XAxis, YAxis, Tooltip , ResponsiveContainer } from 'recharts';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Box, Container} from '@material-ui/core/';\n\nimport useWindowSize from './hooks/useWindowSize'\n\nimport getData from './api/api'\nimport Data from './db/jstest.json';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst App = () => {\nconst classes = useStyles();\n\nconst size = useWindowSize();\n\nconst [dataSet, setDataSet] = useState()\nuseEffect( () => {\n  const dataSet = Data;\n  setDataSet(handleSet(dataSet))\n  // async function fetchData() {\n  //   // You can await here\n  //   const response = await getData().then((res)=>{\n  //     console.log(res);\n    \n  //    })\n  //   // ...\n\n  // }\n  // fetchData();\n\n  \n\n \n},[]\n\n);\n\n\n\n\nconst handleSet = (dataArr) =>\n{\n  var set = []\n  for (var i in dataArr){\n    set.push(dataArr[i])\n  }\n  \n  console.log(set)\n  var newSet = [];\n  for(var j = 0; j < set[0].length; j++){\n    var temp = {};\n    \n    temp.Week = j+1;\n    temp.DM = set[0][j]; \n    temp.TV = set[1][j]; \n    temp.OOH = set[2][j]; \n    temp.PPC = set[3][j]; \n\n    newSet.push(temp)\n  }\n  console.log(newSet)\n\n  return newSet;\n}\n\n  return (\n    <Container >    \n      <h1>Data Visualisation Test</h1> <Box className={classes.paper}\n    display=\"flex\" \n    width={size.width * 0.7} height={size.height * 0.8} \n    bgcolor=\"lightblue\"\n  >\n \n      <ResponsiveContainer >\n        <ComposedChart data={dataSet} margin={{\n            top: 20,\n            right: 80,\n            bottom: 20,\n            left: 20,\n          }}>\n<XAxis dataKey=\"Week\" label={{ value: 'By Weeks', position: 'insideBottomLeft', offset: -5 }} />\n  <YAxis scale=\"log\" label={{value : \"Scale=Log\", angle : -90, position: 'insideLeft'}} domain={[0.00001, 'auto']} allowDataOverflow  />\n  <Tooltip />\n  <Legend />\n  <CartesianGrid stroke=\"#f5f5f5\" />\n  <Area type=\"monotone\" dataKey=\"PPC\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n    <Bar dataKey=\"OOH\" barSize={25} fill=\"#413ea0\" />\n<Scatter type=\"monotone\" barSize={25} dataKey=\"DM\" fill=\"#00ff00\" stroke=\"#00ff00\" />\n  <Line type=\"monotone\" dataKey=\"TV\" fill=\"#000000\" stroke=\"#000000\" />\n\n</ComposedChart></ResponsiveContainer>\n   \n  </Box></Container>\n\n \n\n\n\n\n\n\n\n    \n\n  )\n}\n\nexport default App;\n\n\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useWindowSize() {\r\n\tconst [windowSize, setWindowSize] = useState({\r\n\t\twidth: undefined,\r\n\t\theight: undefined,\r\n\t});\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tfunction handleResize() {\r\n\t\t\t\t//set on state : height/width\r\n\t\t\t\tsetWindowSize({\r\n\t\t\t\t\twidth: window.innerWidth,\r\n\t\t\t\t\theight: window.innerHeight,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t//event listener\r\n\t\t\twindow.addEventListener(\"resize\", handleResize);\r\n\r\n\t\t\t//initialise window size\r\n\t\t\thandleResize();\r\n\r\n\t\t\t//cleanup event listener\r\n\t\t\treturn () => {\r\n\t\t\t\twindow.removeEventListener(\"resize\", handleResize);\r\n\t\t\t};\r\n\t\t},\r\n\t\t//So it acts like a onComponentDidMount\r\n\t\t[]\r\n\t);\r\n\treturn windowSize;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}